// Mocks generated by Mockito 5.1.0 from annotations
// in todoapp/test/data/repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todoapp/data/repository.dart' as _i3;
import 'package:todoapp/model/task.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTask_0 extends _i1.Fake implements _i2.Task {}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i3.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Task>> getAllTask() =>
      (super.noSuchMethod(Invocation.method(#getAllTask, []),
              returnValue: Future<List<_i2.Task>>.value(<_i2.Task>[]))
          as _i4.Future<List<_i2.Task>>);
  @override
  _i4.Future<_i2.Task> getSingleTask({String? id}) =>
      (super.noSuchMethod(Invocation.method(#getSingleTask, [], {#id: id}),
              returnValue: Future<_i2.Task>.value(_FakeTask_0()))
          as _i4.Future<_i2.Task>);
  @override
  _i4.Future<_i2.Task> insertTask({String? title, String? description}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #insertTask, [], {#title: title, #description: description}),
              returnValue: Future<_i2.Task>.value(_FakeTask_0()))
          as _i4.Future<_i2.Task>);
  @override
  _i4.Future<_i2.Task> updateTask({_i2.Task? task}) =>
      (super.noSuchMethod(Invocation.method(#updateTask, [], {#task: task}),
              returnValue: Future<_i2.Task>.value(_FakeTask_0()))
          as _i4.Future<_i2.Task>);
  @override
  _i4.Future<_i2.Task> deleteTask({String? id}) =>
      (super.noSuchMethod(Invocation.method(#deleteTask, [], {#id: id}),
              returnValue: Future<_i2.Task>.value(_FakeTask_0()))
          as _i4.Future<_i2.Task>);
}
